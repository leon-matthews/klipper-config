
[gcode_macro FILAMENT_LOAD]
description: Load filament through bowden tube
variable_load_distance: 520
variable_purge_distance: 30
gcode:
    {% set speed = params.SPEED|default(300) %}             ; 5mm/s
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=filament_load_state
    G91
    G92 E0
    G0 E{load_distance} F{max_velocity}                     ; fast load
    G1 E{purge_distance} F{speed}                           ; purge
    RESTORE_GCODE_STATE NAME=filament_load_state


[gcode_macro FILAMENT_PURGE]
description: Purge a little filament
variable_purge_distance:  30
variable_feedrate:  5
gcode:
    {% set speed = feedrate * 60|float %}
    M117 Purge {purge_distance}mm of filament
    G1 E{purge_distance} F{speed}                           ; purge


[gcode_macro FILAMENT_UNLOAD]
description: Unload filament through bowden tube
variable_unload_distance:  540
variable_purge_distance:  5
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=filament_unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed}                           ; purge
    G1 E-{unload_distance} F{max_velocity}                  ; fast unload
    SET_STEPPER_ENABLE stepper=extruder enable=0            ; turn off extruder
    RESTORE_GCODE_STATE NAME=filament_unload_state


[gcode_macro M117]
description: Echo M117 messages
rename_existing: M117.1
gcode:
    {% if rawparams %}
        {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
        SET_DISPLAY_TEXT MSG="{escaped_msg}"
        RESPOND TYPE=command MSG="{escaped_msg}"
    {% else %}
        SET_DISPLAY_TEXT
    {% endif %}


[gcode_macro M600]
description: Enable G-code M600, mid-print filament change
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PRIME_LINE]
description: Prime filament across back of print bed
variable_extrusion_multiplier: 1.5
gcode:
    {% set MAX_X = printer.toolhead.axis_maximum.x|float %}
    {% set MAX_Y = printer.toolhead.axis_maximum.x|float %}
    {% set NOZZLE = printer.configfile.config.extruder.nozzle_diameter|float %}
    {% set DISTANCE = MAX_Y %}
    {% set EXTRUSION_MULTIPLIER = extrusion_multiplier|float %}
    {% set HEIGHT = 0.70 * NOZZLE %}
    {% set SURFACE_AREA = 2.405 %}      ; 2.405mm2 for 1.75mm filament
    {% set E_DISTANCE = (HEIGHT * NOZZLE * DISTANCE * EXTRUSION_MULTIPLIER) / SURFACE_AREA %}

    M117 Printing prime line..
    G0 X{MAX_X} Y0 Z{HEIGHT} F6000      ; move to front-right
    G92 E0                              ; reset extruder position
    G1 X0 E{E_DISTANCE} F900            ; slowly extrude
    G92 E0                              ; reset extruder position
    G0 Z5                               ; move z up out of the way


[gcode_macro PRINT_START]
description: Prepare printer for printing
# See this article for how to get slicer to pass params to this macro:
# https://ellis3dp.com/Print-Tuning-Guide/articles/passing_slicer_variables.html
variable_preheat_temp: 170
gcode:
    {% set bed_temp = params.BED|default(60)|float %}
    {% set extruder_temp = params.EXTRUDER|default(190)|float %}
    {% set preheat_temp = preheat_temp|float %}

    M140 S{bed_temp}                    ; start bed heating
    M104 S{preheat_temp}                ; start extruder pre-heating
    G90                                 ; absolute positioning
    SET_GCODE_OFFSET Z=0.0              ; reset GCODE Z offset
    SENSORLESS_HOME
    G0 Z5 F3000                         ; quickly move bed near nozzle
    M117 Heating bed to {bed_temp}
    M190 S{bed_temp}                    ; wait for bed temperature
    M117 Heating extruder to {extruder_temp}
    M109 S{extruder_temp}               ; wait for extruder temperature
    PRIME_LINE
    M117 Printing started


[gcode_macro PRINT_END]
description:
gcode:
    M140 S0                             ; Turn off bed, extruder, and fan
    M104 S0
    M106 S0
    G91                                 ; relative positioning
    G0 X-2 Y-2 E-3 F300                 ; move slowly away from print
    G0 Z10 F3000                        ; raise nozzle
    M84                                 ; turn off steppers


[gcode_macro SENSORLESS_HOME]
description: Home each axis individually, then back off to back-right corner
variable_max_printable_x: 120
variable_max_printable_y: 120
# Adapted from Chris Riley's video 'Sensorless Homing Klipper', November 2023
gcode:
    {% set safe_x = printer.configfile.settings.stepper_x.position_endstop - 10 %}
    {% set safe_y = printer.configfile.settings.stepper_y.position_endstop - 10 %}

    SAVE_GCODE_STATE NAME=sensorless_home_state
    G90
    M117 X-axis homing
    G28 X
    G0 X{safe_x} F1200
    G4 P2000                            ; wait

    M117 Y-axis homing
    G28 Y
    G0 Y{safe_y} F1200
    G4 P2000

    M117 Z-axis homing
    G28 Z
    RESTORE_GCODE_STATE NAME=sensorless_home_state


[gcode_macro SEARCH_VARS]
# https://klipper.discourse.group/t/example-search-printer-objects/164
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}
        {% endif %}

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %}

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %}

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %}
                {% endif %}

            {% endfor %}
        {% endif %}
    {% endfor %}